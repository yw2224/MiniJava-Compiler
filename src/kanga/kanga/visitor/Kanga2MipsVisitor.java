package kanga.visitor;
//
//Generated by JTB 1.3.2
//

import java.util.*;

import kanga.kanga2mips.*;
import kanga.parser.*;
import kanga.syntaxtree.*;

/**
* Provides default methods which visit each node in the tree in depth-first
* order.  Your visitors may extend this class.
*/
public class Kanga2MipsVisitor extends GJDepthFirst<ReturnType, Env> {
	//
	// Auto class visitors--probably don't need to be overridden.
	//
	public ReturnType visit(NodeList n, Env argu) {
	   ReturnType _ret=null;
	   int _count=0;
	   for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
	      e.nextElement().accept(this,argu);
	      _count++;
	   }
	   return _ret;
	}
	
	public ReturnType visit(NodeListOptional n, Env argu) {
	   if ( n.present() ) {
	      ReturnType _ret=null;
	      int _count=0;
	      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
	         e.nextElement().accept(this,argu);
	         _count++;
	      }
	      return _ret;
	   }
	   else
	      return null;
	}
	
	public ReturnType visit(NodeOptional n, Env argu) {
	   if ( n.present() )
	      return n.node.accept(this,argu);
	   else
	      return null;
	}
	
	public ReturnType visit(NodeSequence n, Env argu) {
	   ReturnType _ret=null;
	   int _count=0;
	   for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
	      e.nextElement().accept(this,argu);
	      _count++;
	   }
	   return _ret;
	}
	
	public ReturnType visit(NodeToken n, Env argu) { return null; }
	
	//
	// User-generated visitor methods below
	//
	
	void beginProc(String name, int stacknum, Env argu){
		argu.append(".text\n.globl " + name);
		argu.append(name + ":");
		argu.append("sw $fp,-8($sp)"); // frame pointer
		argu.append("sw $ra,-4($sp)"); // return address
		argu.append("move $fp,$sp"); // exchange fp & sp
		argu.append("addi $sp,$sp, " + ((~((stacknum+3)*4))+1)); // update sp	  
	}
	
	void endProc(int stacknum, Env argu){
		argu.append("lw $ra,-4($fp)");
		argu.append("lw $fp,-8($fp)");
		argu.append("addi $sp,$sp, " + (stacknum+3)*4);
		argu.append("jr $ra\n"); // return 
	}
	
	void initData(Env argu) {
		argu.append(".data");
		argu.append(".align 0");
		argu.append("endline: .asciiz \"\\n\"\n");
	}
	/**
	 * f0 -> "MAIN"
	 * f1 -> "["
	 * f2 -> IntegerLiteral()
	 * f3 -> "]"
	 * f4 -> "["
	 * f5 -> IntegerLiteral()
	 * f6 -> "]"
	 * f7 -> "["
	 * f8 -> IntegerLiteral()
	 * f9 -> "]"
	 * f10 -> StmtList()
	 * f11 -> "END"
	 * f12 -> ( Procedure() )*
	 * f13 -> <EOF>
	 */
	public ReturnType visit(Goal n, Env argu) {
	   ReturnType _ret=null;
	   initData(argu); // INITIALIZATION
	   int stackNum = Integer.valueOf(n.f5.f0.tokenImage);
	   
	   beginProc("main", stackNum, argu);	   
	   n.f10.accept(this, argu);
	   endProc(stackNum, argu);
	   
	   n.f12.accept(this, argu);
	   
	   return _ret;
	}
	
	/**
	 * f0 -> ( ( Label() )? Stmt() )*
	 */
	public ReturnType visit(StmtList n, Env argu) {
	   ReturnType _ret=null;
	   n.f0.accept(this, argu);
	   return _ret;
	}
	
	/**
	 * f0 -> Label()
	 * f1 -> "["
	 * f2 -> IntegerLiteral()
	 * f3 -> "]"
	 * f4 -> "["
	 * f5 -> IntegerLiteral()
	 * f6 -> "]"
	 * f7 -> "["
	 * f8 -> IntegerLiteral()
	 * f9 -> "]"
	 * f10 -> StmtList()
	 * f11 -> "END"
	 */
	public ReturnType visit(Procedure n, Env argu) {
	   ReturnType _ret=null;
	   String name = n.f0.f0.tokenImage;
	   int stackNum = Integer.valueOf(n.f5.f0.tokenImage);
	   
	   beginProc(name, stackNum, argu);
	   n.f10.accept(this, argu);
	   endProc(stackNum, argu);
	  
	   return _ret;
	}
	
	/**
	 * f0 -> NoOpStmt()
	 *       | ErrorStmt()
	 *       | CJumpStmt()
	 *       | JumpStmt()
	 *       | HStoreStmt()
	 *       | HLoadStmt()
	 *       | MoveStmt()
	 *       | PrintStmt()
	 *       | ALoadStmt()
	 *       | AStoreStmt()
	 *       | PassArgStmt()
	 *       | CallStmt()
	 */
	public ReturnType visit(Stmt n, Env argu) {
	   ReturnType _ret=null;
	   argu.isInStmt = true;
	   n.f0.accept(this, argu);
	   argu.isInStmt = false;
	   return _ret;
	}
	
	/**
	 * f0 -> "NOOP"
	 */
	public ReturnType visit(NoOpStmt n, Env argu) {
	   ReturnType _ret=null;
	   argu.append("nop");
	   return _ret;
	}
	
	/**
	 * f0 -> "ERROR"
	 */
	public ReturnType visit(ErrorStmt n, Env argu) {
	   ReturnType _ret=null;
	   argu.append("li $v0, 10");
	   argu.append("syscall");
	   return _ret;
	}
	
	/**
	 * f0 -> "CJUMP"
	 * f1 -> Reg()
	 * f2 -> Label()
	 */
	public ReturnType visit(CJumpStmt n, Env argu) {
	   ReturnType _ret=null;
	   ReturnType r1 = n.f1.accept(this, argu);
	   ReturnType r2 = n.f2.accept(this, argu);
	   argu.append("beqz " + r1.value + " " + r2.value);
	   return _ret;
	}
	
	/**
	 * f0 -> "JUMP"
	 * f1 -> Label()
	 */
	public ReturnType visit(JumpStmt n, Env argu) {
	   ReturnType _ret=null;
	   ReturnType r1 = n.f1.accept(this, argu);
	   argu.append("j " + r1.value);
	   return _ret;
	}
	
	/**
	 * f0 -> "HSTORE"
	 * f1 -> Reg()
	 * f2 -> IntegerLiteral()
	 * f3 -> Reg()
	 */
	public ReturnType visit(HStoreStmt n, Env argu) {
	   ReturnType _ret=null;
	   ReturnType r1 = n.f1.accept(this, argu);
	   ReturnType r3 = n.f3.accept(this, argu);
	   int num = Integer.valueOf(n.f2.f0.tokenImage);
	   argu.append("sw " + r3.value + "," + num + "(" + r1.value + ")");
	   return _ret;
	}
	
	/**
	 * f0 -> "HLOAD"
	 * f1 -> Reg()
	 * f2 -> Reg()
	 * f3 -> IntegerLiteral()
	 */
	public ReturnType visit(HLoadStmt n, Env argu) {
	   ReturnType _ret=null;
	   ReturnType r1 = n.f1.accept(this, argu);
	   ReturnType r2 = n.f2.accept(this, argu);
	   int num = Integer.valueOf(n.f3.f0.tokenImage);
	   argu.append("lw " + r1.value + "," + num + "(" + r2.value + ")");
	   return _ret;
	}
	
	/**
	 * f0 -> "MOVE"
	 * f1 -> Reg()
	 * f2 -> Exp()
	 */
	public ReturnType visit(MoveStmt n, Env argu) {
		ReturnType r1 = n.f1.accept(this, argu);
		ReturnType r2 = n.f2.accept(this, argu);
		if (n.f2.f0.choice instanceof SimpleExp){
			Node choice = ((SimpleExp)n.f2.f0.choice).f0.choice;
			String op = "";
			if (choice instanceof IntegerLiteral)
				op = "li ";
			else if (choice instanceof Label)
				op = "la ";
			else if (choice instanceof Reg)
				op = "move ";
			else
				assert(false);
			argu.append(op + r1.value + ", " + r2.value);
		}
		else
			argu.append("move " + r1.value + ", $v0");
		
		return null;
	}
	
	/**
	 * f0 -> "PRINT"
	 * f1 -> SimpleExp()
	 */
	public ReturnType visit(PrintStmt n, Env argu) {
	   ReturnType r1 = n.f1.accept(this, argu);
	   if (n.f1.f0.choice instanceof IntegerLiteral)
		   argu.append("li $a0, " + r1.value);
	   else if (n.f1.f0.choice instanceof Label)
		   argu.append("la $a0, " + r1.value);
	   else if (n.f1.f0.choice instanceof Reg)
		   argu.append("move $a0, " + r1.value);
	   else
		   assert(false);
	   
	   argu.append("li $v0, 1"); // syscall 1
	   argu.append("syscall");
	   
	   argu.append("la $a0, endline"); // print need to print an endline
	   argu.append("li $v0, 4"); // syscall 4
	   argu.append("syscall");
	   
	   return null;
	}
	
	/**
	 * f0 -> "ALOAD"
	 * f1 -> Reg()
	 * f2 -> SpilledArg()
	 */
	public ReturnType visit(ALoadStmt n, Env argu) {
		ReturnType r1 = n.f1.accept(this, argu);
		ReturnType r2 = n.f2.accept(this, argu);
		argu.append("lw " + r1.value + "," + r2.value);
		return null;
	}
	
	/**
	 * f0 -> "ASTORE"
	 * f1 -> SpilledArg()
	 * f2 -> Reg()
	 */
	public ReturnType visit(AStoreStmt n, Env argu) {
	   ReturnType r1 = n.f1.accept(this, argu);
	   ReturnType r2 = n.f2.accept(this, argu);
	   argu.append("sw " + r2.value + "," + r1.value);
	   return null;
	}
	
	/**
	 * f0 -> "PASSARG"
	 * f1 -> IntegerLiteral()
	 * f2 -> Reg()
	 */
	public ReturnType visit(PassArgStmt n, Env argu) {
	   ReturnType r2 = n.f2.accept(this, argu);
	   int num = -4 * (2 + Integer.valueOf(n.f1.f0.tokenImage));
	   argu.append("sw " + r2.value + ", " + num + "($sp)");
	   return null;
	}
	
	/**
	 * f0 -> "CALL"
	 * f1 -> SimpleExp()
	 */
	public ReturnType visit(CallStmt n, Env argu) {
	   ReturnType _ret=null;
	   ReturnType r1 = n.f1.accept(this, argu); 
	   Node choice = n.f1.f0.choice;
	   
	   if (choice instanceof IntegerLiteral){
		   argu.append("li $v0," + r1.value);
		   argu.append("jalr $v0");
	   }
	   else if (choice instanceof Label)
		   argu.append("jal " + r1.value);
	   else if (choice instanceof Reg)
		   argu.append("jalr " + r1.value);
	   else assert(false);
	   
	   return _ret;
	}
	
	/**
	 * f0 -> HAllocate()
	 *       | BinOp()
	 *       | SimpleExp()
	 */
	public ReturnType visit(Exp n, Env argu) {
	   ReturnType _ret = n.f0.accept(this, argu);
	   return _ret;
	}
	
	/**
	 * f0 -> "HALLOCATE"
	 * f1 -> SimpleExp()
	 */
	public ReturnType visit(HAllocate n, Env argu) {
	   ReturnType _ret=null;
	   
	   ReturnType r1 = n.f1.accept(this, argu);
	   if (n.f1.f0.choice instanceof IntegerLiteral)
		   argu.append("li $a0, " + r1.value);
	   else if (n.f1.f0.choice instanceof Label)
		   argu.append("la $a0, " + r1.value);
	   else if (n.f1.f0.choice instanceof Reg)
		   argu.append("move $a0, " + r1.value);
	   else
		   assert(false);
	   
	   argu.append("li $v0, 9");
	   argu.append("syscall");
	   
	   return _ret;
	}
	
	/**
	 * f0 -> Operator()
	 * f1 -> Reg()
	 * f2 -> SimpleExp()
	 */
	public ReturnType visit(BinOp n, Env argu) {
	   ReturnType _ret=null;
	   ReturnType r1 = n.f0.accept(this, argu);
	   ReturnType r2 = n.f1.accept(this, argu);
	   ReturnType r3 = n.f2.accept(this, argu);
	   Node choice2 = n.f2.f0.choice;
	   
	   if (choice2 instanceof IntegerLiteral)
		   argu.append("li $v1, " + r3.value);
	   else if (choice2 instanceof Label)
		   argu.append("la $v1, " + r3.value);
	   else if (choice2 instanceof Reg)
		   argu.append("move $v1, " + r3.value);
	   else
		   assert(false);
	   
	   String op = "";
	   if (r1.value.equals("LT"))
		   op = "slt";
	   else if (r1.value.equals("PLUS"))
		   op = "add";
	   else if (r1.value.equals("MINUS"))
		   op = "sub";
	   else if (r1.value.equals("TIMES"))
		   op = "mul";
	   else assert(false);
	   argu.append(op + " $v0, " + r2.value + ", $v1");
	   
	   return _ret;
	}
	
	/**
	 * f0 -> "LT"
	 *       | "PLUS"
	 *       | "MINUS"
	 *       | "TIMES"
	 */
	public ReturnType visit(Operator n, Env argu) {
	   ReturnType _ret = new ReturnType("Operator", ((NodeToken)n.f0.choice).tokenImage);
	   return _ret;
	}
	
	/**
	 * f0 -> "SPILLEDARG"
	 * f1 -> IntegerLiteral()
	 */
	public ReturnType visit(SpilledArg n, Env argu) {
	   int num = -4 * (3 + Integer.valueOf(n.f1.f0.tokenImage));
	   ReturnType _ret = new ReturnType("SpilledArg", num + "($fp)");
	   return _ret;
	}
	
	/**
	 * f0 -> Reg()
	 *       | IntegerLiteral()
	 *       | Label()
	 */
	public ReturnType visit(SimpleExp n, Env argu) {
	   ReturnType _ret = n.f0.accept(this, argu);
	   return _ret;
	}
	
	/**
	 * f0 -> "a0"
	 *       | "a1"
	 *       | "a2"
	 *       | "a3"
	 *       | "t0"
	 *       | "t1"
	 *       | "t2"
	 *       | "t3"
	 *       | "t4"
	 *       | "t5"
	 *       | "t6"
	 *       | "t7"
	 *       | "s0"
	 *       | "s1"
	 *       | "s2"
	 *       | "s3"
	 *       | "s4"
	 *       | "s5"
	 *       | "s6"
	 *       | "s7"
	 *       | "t8"
	 *       | "t9"
	 *       | "v0"
	 *       | "v1"
	 */
	public ReturnType visit(Reg n, Env argu) {
		String reg = "$" + ((NodeToken)n.f0.choice).tokenImage;
		ReturnType _ret = new ReturnType("Reg", reg);
		return _ret;
	}
	
	/**
	 * f0 -> <INTEGER_LITERAL>
	 */
	public ReturnType visit(IntegerLiteral n, Env argu) {
	   ReturnType _ret = new ReturnType("IntegerLiteral", n.f0.tokenImage);
	   return _ret;
	}
	
	/**
	 * f0 -> <IDENTIFIER>
	 */
	public ReturnType visit(Label n, Env argu) {
	   if (argu.isInStmt == false)
		   argu.append(n.f0.tokenImage + ": ");
	   ReturnType _ret = new ReturnType("Label", n.f0.tokenImage);
	   return _ret;
	}

}

